#!/usr/bin/ruby
#
# carc:
# 	Command line version of CleanArchiver
#
# Copyright (c) 2009 INAJIMA Daisuke All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#

require 'optparse'

$KCODE = 'UTF8'


MACSPECS = ['._*', '.DS_Store', 'icon\r']

def check_cmd(cmd)
  if !system('/usr/bin/which', '-s', cmd)
    warn("#{cmd} program is not found")
    exit(1)
  end
end

dmg_ie = false		# internet-enable disk image
enc = ''		# encoding in archive
format = nil		# archive format
level = -1		# conpression level; -1 means 'not specified'
password = ''		# archive password
rsrc = true		# save resource forks?
xdss = false		# exclude .DS_Store?
xfiles = []		# exclude files
xmacspec = false	# exclude mac specific files?

ARGV.options do |opt|
  opt.on('-0')						{ |v| level = 0 }
  opt.on('-1')						{ |v| level = 1 }
  opt.on('-2')						{ |v| level = 2 }
  opt.on('-3')						{ |v| level = 3 }
  opt.on('-4')						{ |v| level = 4 }
  opt.on('-5')						{ |v| level = 5 }
  opt.on('-6')						{ |v| level = 6 }
  opt.on('-7')						{ |v| level = 7 }
  opt.on('-8')						{ |v| level = 8 }
  opt.on('-9')						{ |v| level = 9 }
  opt.on('-C',		'Exclude all Mac-specific files'){ |v| xmacspec = true }
  opt.on('-D',		'Exclude .DS_Store')		{ |v| xdss = true }
  opt.on('-E encoding'	'Encoding in archive')		{ |v| enc = v }
  opt.on('-I',		'Create internet-enable DMG')	{ |v| dmg_ie = true }
  opt.on('-O opts',	'Extra options')		{ |v| exopts = v }
  opt.on('-P password',	'Archive password')		{ |v| password = v }
  opt.on('-R',		'Discard resource forks')	{ |v| rsrc = false }
  opt.on('-b',		'Create bzip2 archive')		{ |v| format = 'bzip2' }
  opt.on('-d',		'Create disk image')		{ |v| format = 'dmg' }
  opt.on('-g',		'Create gzip archive')		{ |v| format = 'gzip' }
  opt.on('-s',		'Create 7zip archive')		{ |v| format = '7zip' }
  opt.on('-t format',	'Archive format')		{ |v| format = v }
  opt.on('-x pat',	'Exclude pattern')		{ |v| xfiles.push(v) }
  opt.on('-z',		'Create zip archive')		{ |v| format = 'zip' }

  opt.parse!
end

dst = ARGV.shift
srcs = ARGV

if xdss
  xfiles.push('.DS_Store')
end

if xmacspec
  rsrc = false
  xfiles += MACSPECS
end

if !rsrc
  xfiles.push('._*')
elsif xfiles.include?('._*')
  rsrc = false
end

xfiles.uniq!

cmdline = []

case format
when '7zip'
  check_cmd('7za')

  if dst == '-'
    warn("7zip not support to write stdout")
    exit(1)
  end

  cmdline = ['7za', 'a']

  xfiles.each do |pat|
    cmdline.push("-xr!#{pat}")
  end

  if password != ""
    cmdline.push("-p#{password}")
  end

  cmdline.push(dst)
  cmdline += srcs

  # Stop verbose output 7za always report it.
  stdout_sv = STDOUT.dup
  STDOUT.reopen('/dev/null')

  system(*cmdline)

  STDOUT.flush
  STDOUT.reopen(stdout_sv)
when 'bzip2', 'gzip'
  compress = format

  check_cmd(compress)

  if level != -1
    if compress == 'bzip2'
      ENV['BZIP2'] = "-#{level}"
    else
      ENV['GZIP'] = "-#{level}"
    end
  end

  if srcs.size > 1 || FileTest.directory?(srcs[0]) || rsrc
    check_cmd('tar')

    cmdline = ['tar', '-cf', '-', '--use-compress-program', compress]

    xfiles.each do |pat|
      cmdline.push('--exclude', pat)
    end

    if !rsrc
      # For Mac OS X 10.5 and later
      ENV['COPYFILE_DISABLE'] = "1"
      # For Mac OS X 10.4 and earlier
      ENV['COPY_EXTENDED_ATTRIBUTES_DISABLE'] = "1"
    end

    cmdline += srcs
  else
    cmdline = [compress, '-c', srcs[0]]
  end

  if dst != '-'
    stdout_sv = STDOUT.dup
    STDOUT.reopen(dst)
  end

  system(*cmdline)

  if dst != '-'
    STDOUT.flush
    STDOUT.reopen(stdout_sv)
  end
when 'dmg'
  check_cmd('mkdmg')

  if srcs.size != 1 || !FileTest.directory?(srcs[0])
    warn("disk image can be made from only one directory")
    exit(1)
  end

  if dst == '-'
    warn("can't output disk image data to stdout")
    exit(1)
  end

  cmdline = ['mkdmg', '-o', dst]

  if password != ''
    cmdline.push('-P', password)
  end

  xfiles.each do |pat|
    cmdline.push('-x', pat)
  end

  cmdline.push(srcs[0])

  system(*cmdline)
when 'rar'
  check_cmd('rar')

  cmdline = ['rar']
when 'zip'
  check_cmd('zip')

  cmdline = ['zip', '-q']

  if srcs.size > 1 || FileTest.directory?(srcs[0])
    cmdline.push('-r')
  end

  if enc != ''
    cmdline.push('-CF', 'UTF-8-MAC', '-CT', enc)
  end

  if level != -1
    cmdline.push("-#{level}")
  end

  if password != ''
    cmdline.push('-P', password)
  end

  if !rsrc
    cmdline.push('-df')
  end

  cmdline.push(dst)
  cmdline += srcs

  xfiles.each do |pat|
    cmdline.push('-x', "*/#{pat}")
  end

  if FileTest.exist?(dst)
    File.unlink(dst)
  end
  system(*cmdline)
else
  warn('no archive format is specified')
  exit(1)
end
